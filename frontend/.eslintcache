[{"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\index.js":"1","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\App.js":"2","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\redux\\store.js":"4","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\redux\\reducer.js":"5","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AddItemForm.js":"6","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\RegistrationForm.js":"7","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\ItemsForm.js":"8","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\DisplayItems.js":"9","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\LogInForm.js":"10","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCart.js":"11","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AddCategory.js":"12","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\EditItemForm.js":"13","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCartMap.js":"14","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\Transactions.js":"15","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\UserProfile.js":"16","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AdminView.js":"17","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCheckOut.js":"18","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\PreviewItem.js":"19"},{"size":719,"mtime":1612101649808,"results":"20","hashOfConfig":"21"},{"size":8181,"mtime":1619563119212,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":132,"mtime":1611728038875,"results":"24","hashOfConfig":"21"},{"size":4289,"mtime":1614323631248,"results":"25","hashOfConfig":"21"},{"size":6690,"mtime":1615175897807,"results":"26","hashOfConfig":"21"},{"size":7022,"mtime":1619580044635,"results":"27","hashOfConfig":"21"},{"size":2892,"mtime":1614503299535,"results":"28","hashOfConfig":"21"},{"size":7317,"mtime":1619498254321,"results":"29","hashOfConfig":"21"},{"size":2926,"mtime":1619579019356,"results":"30","hashOfConfig":"21"},{"size":8661,"mtime":1619412412403,"results":"31","hashOfConfig":"21"},{"size":16672,"mtime":1614145818386,"results":"32","hashOfConfig":"21"},{"size":14051,"mtime":1614503147372,"results":"33","hashOfConfig":"21"},{"size":6663,"mtime":1619505773259,"results":"34","hashOfConfig":"21"},{"size":12519,"mtime":1619445622229,"results":"35","hashOfConfig":"21"},{"size":3311,"mtime":1619577707708,"results":"36","hashOfConfig":"21"},{"size":16222,"mtime":1614503035099,"results":"37","hashOfConfig":"21"},{"size":15954,"mtime":1619580955620,"results":"38","hashOfConfig":"21"},{"size":6435,"mtime":1619496663448,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"nfa31c",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\index.js",[],["89","90"],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\App.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\redux\\store.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\redux\\reducer.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AddItemForm.js",["91","92"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport AddCategory from './AddCategory';\r\nimport additem from '../mycss/additem.css';\r\n//dito ako mag-aad ng mga items\r\nclass AddItemForm extends React.Component {\r\n  state = {\r\n    name: '',\r\n    mainCategory: '--SELECT--',\r\n    subCategory: '--SELECT--',\r\n    quantity: '',\r\n    price: '',\r\n    image: '',\r\n    arrOfImages: [],\r\n  };\r\n  addImaageBtn = (e) => {\r\n    if (window.confirm('Add this image?')) {\r\n      let arrOfImagesCopy = this.state.arrOfImages.slice(0);\r\n      arrOfImagesCopy.push(this.state.image);\r\n      this.setState({ arrOfImages: arrOfImagesCopy, image: '' });\r\n      alert('Image added');\r\n    }\r\n  };\r\n  addItemBtn = () => {\r\n    let item;\r\n    if (\r\n      this.state.category === '--SELECT--' ||\r\n      this.state.subCategory === '--SELECT--'\r\n    ) {\r\n      return alert('Please provide category!');\r\n    } else {\r\n      let image = [];\r\n      if (this.state.arrOfImages.length === 0) {\r\n        image.push(this.state.image);\r\n      } else {\r\n        image = this.state.arrOfImages;\r\n      }\r\n      item = {\r\n        name: this.state.name,\r\n        mainCategory: this.state.mainCategory,\r\n        subCategory: this.state.subCategory,\r\n        quantity: this.state.quantity,\r\n        price: this.state.price,\r\n        image: image,\r\n      };\r\n      // return console.log(item);\r\n\r\n      axios\r\n        .post('http://localhost:8080/additem', item, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n            role: this.props.user.role,\r\n          },\r\n        })\r\n        .then((newAddedItem) => {\r\n          if (newAddedItem.data.error) {\r\n            alert(newAddedItem.data.error);\r\n          } else {\r\n            this.updateAllItems();\r\n            alert('Item saved');\r\n          }\r\n          this.setState({\r\n            name: '',\r\n            mainCategory: '--SELECT--',\r\n            subCategory: '--SELECT--',\r\n            quantity: '',\r\n            price: '',\r\n            image: '',\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  //this is to update the items/show all\r\n  updateAllItems = () => {\r\n    // alert('got it');\r\n    axios.get('http://localhost:8080/getitems').then((allItems) => {\r\n      this.props.dispatchToStore(allItems.data);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.arrOfImages);\r\n    //this is for subCategories\r\n    let sub = this.props.mainCat.filter((main) => {\r\n      return main.name === this.state.mainCategory;\r\n    });\r\n    // console.log(this.props.mainCat);\r\n\r\n    return (\r\n      <div className=\"main-container-additem\">\r\n        <div className=\"mini-container-additem\">\r\n          <div className=\"div-for-closed\">\r\n            <span\r\n              onClick={() => {\r\n                this.props.showMyAddItem(false);\r\n              }}\r\n            >\r\n              X\r\n            </span>\r\n          </div>\r\n          <label>Item Name</label>\r\n          <br />\r\n          <input\r\n            className=\"input-itemname\"\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={(e) => {\r\n              this.setState({ name: e.target.value });\r\n            }}\r\n          ></input>\r\n          <br />\r\n\r\n          <label>Maincategory</label>\r\n          <br />\r\n          <select\r\n            className=\"input-itemmaincategory\"\r\n            value={this.state.mainCategory}\r\n            onChange={(e) => {\r\n              this.setState({\r\n                mainCategory: e.target.value,\r\n                subCategory: '--SELECT--',\r\n              });\r\n            }}\r\n          >\r\n            <option>--SELECT--</option>\r\n            {this.props.mainCat.length > 0\r\n              ? this.props.mainCat.map((cat) => {\r\n                  return <option key={cat.name}>{cat.name}</option>;\r\n                })\r\n              : ''}\r\n          </select>\r\n          {this.state.category !== '--SELECT--' ? (\r\n            <>\r\n              <br />\r\n              <label>Subcategory</label>\r\n              <br />\r\n              <select\r\n                className=\"input-itemsubcategory\"\r\n                value={this.state.subCategory}\r\n                onChange={(e) => this.setState({ subCategory: e.target.value })}\r\n              >\r\n                <option>--SELECT--</option>\r\n                {sub.length > 0\r\n                  ? sub[0].sub.map((subCat) => {\r\n                      return <option key={subCat}>{subCat}</option>;\r\n                    })\r\n                  : ''}\r\n              </select>\r\n            </>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <br />\r\n          <label>Quantity</label>\r\n          <br />\r\n          <input\r\n            className=\"input-itemquantity\"\r\n            type=\"number\"\r\n            value={this.state.quantity}\r\n            onChange={(e) => {\r\n              this.setState({ quantity: e.target.value });\r\n            }}\r\n          ></input>\r\n          <br />\r\n          <label>Price</label>\r\n          <br />\r\n          <input\r\n            className=\"input-itemprice\"\r\n            type=\"number\"\r\n            value={this.state.price}\r\n            onChange={(e) => {\r\n              this.setState({ price: e.target.value });\r\n            }}\r\n          ></input>\r\n\r\n          <br />\r\n          <div className=\"div-for-add-image\">\r\n            <label>Image</label>\r\n            {this.state.image !== '' ? (\r\n              <button\r\n                id=\"add-image-btn\"\r\n                onClick={(e) => {\r\n                  this.addImaageBtn(e);\r\n                }}\r\n              >\r\n                ADD\r\n              </button>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n          <input\r\n            className=\"input-itemimage\"\r\n            type=\"text\"\r\n            value={this.state.image}\r\n            onChange={(e) => {\r\n              this.setState({\r\n                image: e.target.value,\r\n              });\r\n            }}\r\n          ></input>\r\n\r\n          <div className=\"div-for-addProductBtn\">\r\n            <button className=\"add-itemBtn\" onClick={this.addItemBtn}>\r\n              SAVE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    mainCat: store.mainCategories,\r\n    subCategories: store.subCategories,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchToStore: (allItems) =>\r\n      dispatch({ type: 'DISPATCH_ALL_ITEMS', payload: allItems }),\r\n    showMyAddItem: (req) =>\r\n      dispatch({ type: 'SHOW_MY_ADD_ITEM', payload: req }),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItemForm);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\RegistrationForm.js",["93"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport registrationstyle from '../mycss/registrationstyle.css';\r\nimport { Redirect } from 'react-router-dom';\r\n//form for registration\r\nclass RegistrationForm extends React.Component {\r\n  state = {\r\n    username: '',\r\n    password: '',\r\n    firstName: '',\r\n    middleName: '',\r\n    lastName: '',\r\n    emailAddress: '',\r\n    contactNumber: '',\r\n    address: '',\r\n    confirmedPassword: '',\r\n    role: 'user',\r\n    informationForm: false,\r\n    redirect: false,\r\n  };\r\n\r\n  submitBtn = () => {\r\n    if (this.state.password !== this.state.confirmedPassword) {\r\n      return alert('Password is incorrect');\r\n    } else if (this.state.username === '' || this.state.password === '') {\r\n      alert('Error !');\r\n    } else {\r\n      this.setState({ informationForm: true });\r\n    }\r\n  };\r\n\r\n  nowBtn = () => {\r\n    if (\r\n      this.state.firstName === '' ||\r\n      this.state.middleName === '' ||\r\n      this.state.lastName === '' ||\r\n      this.state.emailAddress === '' ||\r\n      this.state.contactNumber === '' ||\r\n      this.state.address === ''\r\n    ) {\r\n      return alert('Error, all fields are required');\r\n    }\r\n    let information = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      role: this.state.role,\r\n      information: [\r\n        {\r\n          firstName: this.state.firstName,\r\n          middleName: this.state.middleName,\r\n          lastName: this.state.lastName,\r\n          emailAddress: this.state.emailAddress,\r\n          contactNumber: this.state.contactNumber,\r\n          address: this.state.address,\r\n        },\r\n      ],\r\n    };\r\n    // console.log(information);\r\n    axios.post('http://localhost:8080/register', information).then((res) => {\r\n      if (res.data.error) {\r\n        alert(res.data.error);\r\n      } else {\r\n        console.log(res.data);\r\n        this.setState({ redirect: true });\r\n      }\r\n    });\r\n  };\r\n\r\n  laterBtn = () => {\r\n    // alert('this is for later submit');\r\n\r\n    let initial = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      role: this.state.role,\r\n    };\r\n    axios.post('http://localhost:8080/register', initial).then((res) => {\r\n      if (res.data.error) {\r\n        alert(res.data.error);\r\n      } else {\r\n        console.log(res.data);\r\n        this.setState({ redirect: true });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state.firstName);\r\n    // console.log(this.state.username);\r\n    // console.log(this.state.informationForm);\r\n    return (\r\n      <div className=\"main-container-registration\">\r\n        {this.state.redirect && <Redirect to=\"/login\" />}\r\n        <div className=\"div-bg-cart\"></div>\r\n        {this.state.informationForm ? ( //ternary\r\n          <div className=\"div-for-information\">\r\n            <div className=\"signuptext\">\r\n              <p className=\"p-sign-up\">SIGN UP</p>\r\n            </div>\r\n            <label>First Name</label>\r\n            <br />\r\n            <input\r\n              className=\"input-firstname\"\r\n              type=\"text\"\r\n              required\r\n              value={this.state.firstName}\r\n              onChange={(e) => this.setState({ firstName: e.target.value })}\r\n            ></input>\r\n            <br />\r\n            <label>Middle Name</label>\r\n            <br />\r\n            <input\r\n              className=\"input-middlename\"\r\n              type=\"text\"\r\n              required\r\n              value={this.state.middleName}\r\n              onChange={(e) => {\r\n                this.setState({ middleName: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <label>Last Name</label>\r\n            <br />\r\n            <input\r\n              className=\"input-lastname\"\r\n              type=\"text\"\r\n              required\r\n              value={this.state.lastName}\r\n              onChange={(e) => {\r\n                this.setState({ lastName: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <label>Email Address</label>\r\n            <br />\r\n            <input\r\n              className=\"input-email\"\r\n              type=\"email\"\r\n              required\r\n              value={this.state.emailAddress}\r\n              onChange={(e) => {\r\n                this.setState({ emailAddress: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <label>Contact Number</label>\r\n            <br />\r\n            <input\r\n              className=\"input-contactnumber\"\r\n              type=\"number\"\r\n              required\r\n              value={this.state.contactNumber}\r\n              onChange={(e) => {\r\n                this.setState({ contactNumber: e.target.value });\r\n              }}\r\n            ></input>\r\n            <label>Address</label>\r\n            <br />\r\n            <input\r\n              className=\"input-address\"\r\n              type=\"text\"\r\n              required\r\n              value={this.state.address}\r\n              onChange={(e) => {\r\n                this.setState({ address: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <div className=\"div-for-now-later\">\r\n              <button className=\"nowBtn\" onClick={this.nowBtn}>\r\n                OK\r\n              </button>\r\n\r\n              <button className=\"laterBtn\" onClick={this.laterBtn}>\r\n                Later\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"mini-container-registration\">\r\n            <div className=\"signuptext\">\r\n              <p className=\"p-sign-up\">SIGN UP</p>\r\n            </div>\r\n            <label>Username</label>\r\n            <br />\r\n            <input\r\n              className=\"input-username\"\r\n              type=\"text\"\r\n              required\r\n              value={this.state.username}\r\n              onChange={(e) => this.setState({ username: e.target.value })}\r\n            ></input>\r\n            <br />\r\n            <label>Password</label>\r\n            <br />\r\n            <input\r\n              className=\"input-password\"\r\n              type=\"password\"\r\n              required\r\n              value={this.state.password}\r\n              onChange={(e) => {\r\n                this.setState({ password: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <label>Confirm Password</label>\r\n            <br />\r\n            <input\r\n              className=\"input-password confirm\"\r\n              type=\"password\"\r\n              required\r\n              value={this.state.confirmedPassword}\r\n              onChange={(e) => {\r\n                this.setState({ confirmedPassword: e.target.value });\r\n              }}\r\n            ></input>\r\n            <br />\r\n            <div className=\"div-for-submit\">\r\n              <button className=\"submitBtn\" onClick={this.submitBtn}>\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default RegistrationForm;\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\ItemsForm.js",["94"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DisplayItems from './DisplayItems';\r\nimport EditItemForm from './EditItemForm';\r\nimport PreviewItem from './PreviewItem';\r\nimport displayitems from '../mycss/displayitems.css';\r\n//dito ako magmamap ng mga items\r\nclass ItemsForm extends React.Component {\r\n  state = {\r\n    filter: '',\r\n    searchWord: '',\r\n  };\r\n  render() {\r\n    let isSearch;\r\n    let search = this.props.searchWord;\r\n    if (search === '') {\r\n      isSearch = 'NO';\r\n    } else {\r\n      isSearch = 'YES';\r\n    }\r\n\r\n    let searchWord = 'none'; //yung tinaype ni user\r\n    let foundWord; //senearch na meron sa words(maincat and subcat)\r\n    foundWord = this.props.words.includes(this.props.searchWord);\r\n    if (foundWord) {\r\n      searchWord = this.props.searchWord;\r\n    } else {\r\n      searchWord = 'none';\r\n    }\r\n\r\n    return (\r\n      <div className=\"main-container-items\">\r\n        {this.props.itemToBeEdited !== null ? (\r\n          <EditItemForm item={this.props.itemToBeEdited} />\r\n        ) : (\r\n          ''\r\n        )}\r\n        {this.props.previewItem !== null ? (\r\n          <PreviewItem item={this.props.previewItem} />\r\n        ) : (\r\n          ''\r\n        )}\r\n        <div className=\"title-on-top\">\r\n          <strong>TRENDS TODAY</strong>\r\n        </div>\r\n        {isSearch === 'NO' ? (\r\n          <div className=\"mini-container-items\">\r\n            {this.props.filterByMainCategory === 'Filter'\r\n              ? this.props.items.map((item) => {\r\n                  //all items\r\n                  return <DisplayItems item={item} key={item._id} />;\r\n                })\r\n              : this.props.items //filter by category\r\n                  .filter(\r\n                    (item) =>\r\n                      item.mainCategory === this.props.filterByMainCategory\r\n                  )\r\n                  .map((item) => {\r\n                    return <DisplayItems item={item} key={item._id} />;\r\n                  })}\r\n          </div>\r\n        ) : (\r\n          <div className=\"mini-container-items\">\r\n            {foundWord\r\n              ? this.props.items //filter by category\r\n                  .filter(\r\n                    (item) =>\r\n                      item.subCategory.startsWith(searchWord) ||\r\n                      item.mainCategory.startsWith(searchWord)\r\n                  )\r\n                  .map((item) => {\r\n                    return <DisplayItems item={item} key={item._id} />;\r\n                  })\r\n              : ''}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    items: store.items,\r\n    itemToBeEdited: store.itemToBeEdited,\r\n    filterByMainCategory: store.filterByMainCategory,\r\n    words: store.words,\r\n    searchWord: store.searchWord,\r\n    previewItem: store.previewItem,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ItemsForm);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\DisplayItems.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\LogInForm.js",["95"],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCart.js",["96","97"],"import axios from 'axios';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport mycartstyle from '../mycss/mycart.css';\r\n//dito ako mag-lalagay ng mga items na nasa cart\r\nclass MyCart extends React.Component {\r\n  state = {\r\n    quantity: this.props.item.quantity,\r\n    myCheckOutItems: [], //container of my order\r\n    selectAll: this.props.selectAll,\r\n    dotted: true,\r\n    removeOption: false,\r\n  };\r\n\r\n  AddQuantityBtn = () => {\r\n    let myCheckOutItemsCopy = this.props.myCheckOutItems.slice(0);\r\n\r\n    if (myCheckOutItemsCopy.length === 0) {\r\n      return alert('Please select this item before to add quantity');\r\n    } else {\r\n      let filtered = myCheckOutItemsCopy.filter(\r\n        (item) => item.name === this.props.item.name\r\n      );\r\n      if (filtered.length === 0) {\r\n        return alert('Please select this item before to add quantity');\r\n      } else {\r\n        //na select na\r\n        myCheckOutItemsCopy.forEach((inMyCheckOut) => {\r\n          if (inMyCheckOut.name === this.props.item.name) {\r\n            inMyCheckOut.quantity += 1;\r\n            inMyCheckOut.subTotal = inMyCheckOut.price * inMyCheckOut.quantity;\r\n            this.props.addToCheckOut(myCheckOutItemsCopy);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    //setstate to update the quantity on front end\r\n    this.setState({\r\n      quantity: this.state.quantity + 1,\r\n    });\r\n  };\r\n\r\n  minusQuantityBtn = () => {\r\n    if (this.state.quantity === 1) {\r\n      return;\r\n    }\r\n    let myCheckOutItemsCopy = this.props.myCheckOutItems.slice(0);\r\n\r\n    if (myCheckOutItemsCopy.length === 0) {\r\n      return alert('Please select this item before reducing the quantity');\r\n    } else {\r\n      let filtered = myCheckOutItemsCopy.filter(\r\n        (item) => item.name === this.props.item.name\r\n      );\r\n      if (filtered.length === 0) {\r\n        return alert('Please select this item before reducing the quantity');\r\n      } else {\r\n        //na select na\r\n        myCheckOutItemsCopy.forEach((inMyCheckOut) => {\r\n          if (inMyCheckOut.name === this.props.item.name) {\r\n            inMyCheckOut.quantity -= 1;\r\n            inMyCheckOut.subTotal = inMyCheckOut.price * inMyCheckOut.quantity;\r\n            this.props.addToCheckOut(myCheckOutItemsCopy);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    //setstate to update the quantity on front end\r\n    this.setState({\r\n      quantity: this.state.quantity - 1,\r\n    });\r\n  };\r\n\r\n  //this is to control the check out items\r\n\r\n  checker = (item) => {\r\n    this.setState({ selectAll: !this.state.selectAll });\r\n    let myCheckOutItemsCopy = this.props.myCheckOutItems.slice(0);\r\n    let myCheckoutToday = [];\r\n    console.log(myCheckOutItemsCopy);\r\n\r\n    if (myCheckOutItemsCopy.length === 0) {\r\n      alert('Checked');\r\n      myCheckoutToday.push(item);\r\n      this.props.addToCheckOut(myCheckoutToday);\r\n    } else {\r\n      let filtered = myCheckOutItemsCopy.filter(\r\n        (filtered) => filtered.name === this.props.item.name\r\n      );\r\n\r\n      if (filtered.length === 1) {\r\n        //may nahanap na parehong item\r\n        myCheckOutItemsCopy.forEach((inMyCheckOut, index) => {\r\n          if (filtered[0].name === inMyCheckOut.name) {\r\n            myCheckOutItemsCopy.splice(index, 1); //inuncheck ito\r\n            alert('Uncheck');\r\n          }\r\n        });\r\n        this.props.addToCheckOut(myCheckOutItemsCopy);\r\n      } else {\r\n        //walang nahanp na paarehong item sa checkoutItems\r\n        myCheckOutItemsCopy.push(item);\r\n        this.props.addToCheckOut(myCheckOutItemsCopy);\r\n        // alert('wala na splice');\r\n      }\r\n    }\r\n  };\r\n\r\n  //remove from myCart\r\n  removeItemHandler = () => {\r\n    let updatedCart = JSON.parse(localStorage.getItem('myCart'));\r\n    updatedCart.forEach((inMyCart, index) => {\r\n      if (\r\n        inMyCart.user === this.props.user.username &&\r\n        inMyCart.name === this.props.item.name\r\n      ) {\r\n        updatedCart.splice(index, 1);\r\n      }\r\n    });\r\n    localStorage.setItem('myCart', JSON.stringify(updatedCart));\r\n    this.props.addToCart(updatedCart);\r\n  };\r\n\r\n  //if something updated\r\n  componentDidUpdate = (prevProps) => {\r\n    if (prevProps.selectAll !== this.props.selectAll) {\r\n      this.setState({ selectAll: this.props.selectAll });\r\n    }\r\n    if (prevProps.doneCheckOut !== this.props.doneCheckOut) {\r\n      this.setState({ selectAll: false });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"div-per-item\">\r\n        <div className=\"div-for-remove-option\">\r\n          {!this.state.dotted ? (\r\n            <div>\r\n              <button id=\"remove-btn\" onClick={this.removeItemHandler}>\r\n                Remove\r\n              </button>\r\n              <button\r\n                id=\"close-btn\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    removeOption: !this.state.removeOption,\r\n                    dotted: !this.state.dotted,\r\n                  });\r\n                }}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <i\r\n              className=\"fas fa-ellipsis-v\"\r\n              id=\"i-dotted\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  removeOption: !this.state.removeOption,\r\n                  dotted: !this.state.dotted,\r\n                })\r\n              }\r\n            ></i>\r\n          )}\r\n        </div>\r\n        <div className=\"div-for-check-and-image\">\r\n          <div className=\"div-for-item-check\">\r\n            <span\r\n              onClick={() => {\r\n                this.checker({\r\n                  name: this.props.item.name,\r\n                  quantity: this.state.quantity,\r\n                  price: this.props.item.price,\r\n                  mainCategory: this.props.item.mainCategory,\r\n                  subCategory: this.props.item.subCategory,\r\n                  subTotal: this.state.quantity * this.props.item.price,\r\n                  image: this.props.item.image,\r\n                  status: this.props.item.status,\r\n                });\r\n              }}\r\n            >\r\n              <input\r\n                onChange={(e) => {\r\n                  console.log(e.target.value);\r\n                }}\r\n                checked={this.state.selectAll}\r\n                type=\"checkbox\"\r\n                className=\"input-check\"\r\n                id=\"input-for-check\"\r\n              ></input>\r\n            </span>\r\n          </div>\r\n          <div className=\"div-for-img-cart\">\r\n            <div className=\"div-for-item-image\">\r\n              <img\r\n                className=\"img-cart\"\r\n                src={this.props.item.image}\r\n                alt={this.props.item.name}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"div-for-item-name-cart\">{this.props.item.name}</div>\r\n        </div>\r\n        <div className=\"div-for-item-quantity\">\r\n          <table className=\"table\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <button\r\n                    className=\"minusQuantityBtn\"\r\n                    onClick={this.minusQuantityBtn}\r\n                  >\r\n                    -\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    className=\"input-quantity\"\r\n                    value={this.state.quantity}\r\n                    onChange={(e) => {\r\n                      this.setState({ quantity: e.target.value });\r\n                    }}\r\n                  ></input>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"addQuantityBtn\"\r\n                    onClick={this.AddQuantityBtn}\r\n                  >\r\n                    +\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"div-for-item-price\">\r\n          <small>Php {this.props.item.price}</small>\r\n        </div>\r\n        <div className=\"div-for-item-subtotal\">\r\n          <small>Php {this.state.quantity * this.props.item.price}</small>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    myCartCopy: store.myCartCopy,\r\n    myCheckOutItems: store.myCheckOutItems,\r\n    doneCheckOut: store.doneCheckOut,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToCart: (myOrder) => dispatch({ type: 'ADD_TO_CART', payload: myOrder }),\r\n\r\n    addToCheckOut: (myOrder) =>\r\n      dispatch({ type: 'ADD_TO_CHECKOUT', payload: myOrder }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyCart);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AddCategory.js",["98"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport addcategory from '../mycss/addcategory.css';\r\nclass AddCategory extends React.Component {\r\n  state = {\r\n    idToFind: '',\r\n    mainCategory: '--SELECT--',\r\n    subCategory: '--SELECT--',\r\n    newMainCategory: '',\r\n    newSubCategory: '',\r\n    showViewCatForm: false,\r\n    showAddCatForm: false,\r\n    showNewCatForm: false,\r\n    showInputEdit: false,\r\n    inputEdit: '',\r\n    originalCategory: '',\r\n  };\r\n  //to reload updated categories\r\n  updateCategories = () => {\r\n    axios.get('http://localhost:8080/getcategory').then((category) => {\r\n      this.props.updateCategoryToStore(category.data);\r\n    });\r\n  };\r\n\r\n  viewCatBtn = () => {\r\n    this.setState({ showAddCatForm: false });\r\n    this.setState({ showNewCatForm: false });\r\n\r\n    this.state.showViewCatForm\r\n      ? this.setState({ showViewCatForm: false })\r\n      : this.setState({ showViewCatForm: true });\r\n  };\r\n  addCatBtn = () => {\r\n    this.setState({ showViewCatForm: false });\r\n    this.setState({ showNewCatForm: false });\r\n\r\n    this.state.showAddCatForm\r\n      ? this.setState({ showAddCatForm: false })\r\n      : this.setState({ showAddCatForm: true });\r\n  };\r\n  newBtn = () => {\r\n    !this.state.showNewCatForm\r\n      ? this.setState({ showNewCatForm: true })\r\n      : this.setState({ showNewCatForm: false });\r\n  };\r\n\r\n  editCategoryFunction = (idToFind, updatedCategory) => {\r\n    axios\r\n      .put(`http://localhost:8080/editcategory/${idToFind}`, updatedCategory, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((updated) => {\r\n        if (updated.data.error) {\r\n          alert(updated.data.error);\r\n        } else {\r\n          this.updateCategories();\r\n          this.setState({\r\n            inputEdit: '',\r\n            originalCategory: '',\r\n            showInputEdit: false,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  //this is for new sub category only\r\n  newSubCatSaveBtn = () => {\r\n    let idToFind;\r\n    let newSubCategory;\r\n    if (\r\n      this.state.mainCategory === '--SELECT--' ||\r\n      this.state.newSubCategory === ''\r\n    ) {\r\n      return alert('Please select appropriate category');\r\n    } else {\r\n      newSubCategory = {\r\n        sub: this.state.newSubCategory,\r\n      };\r\n      idToFind = this.props.mainCat.filter(\r\n        (category) => category.name === this.state.mainCategory\r\n      )[0]._id; //oks\r\n      axios\r\n        .post(\r\n          'http://localhost:8080/addcategory/' + idToFind + '/subcategory',\r\n          newSubCategory,\r\n          {\r\n            headers: {\r\n              Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n              role: this.props.user.role,\r\n            },\r\n          }\r\n        )\r\n        .then((newSubCat) => {\r\n          if (newSubCat.data.error) {\r\n            alert(newSubCat.data.error);\r\n          } else {\r\n            this.updateCategories();\r\n          }\r\n        });\r\n    }\r\n    this.setState({ newSubCategory: '' });\r\n  };\r\n\r\n  //for new main category and new sub category\r\n  newCatSaveBtn = () => {\r\n    let newCategory;\r\n    if (this.state.newMainCategory === '') {\r\n      return alert('Please provide appropriate category');\r\n    } else if (this.state.newSubCategory === '') {\r\n      newCategory = {\r\n        name: this.state.newMainCategory,\r\n      };\r\n    } else {\r\n      newCategory = {\r\n        name: this.state.newMainCategory,\r\n        sub: this.state.newSubCategory,\r\n      };\r\n    }\r\n    axios\r\n      .post('http://localhost:8080/addcategory', newCategory, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((category) => {\r\n        if (category.data.error) {\r\n          alert(category.data.error);\r\n        } else {\r\n          this.updateCategories();\r\n        }\r\n      });\r\n    this.setState({ newMainCategory: '', newSubCategory: '' });\r\n  };\r\n\r\n  //edit main category\r\n  editBtn = () => {\r\n    if (this.state.mainCategory === '--SELECT--') {\r\n      return alert('Please select valid category');\r\n    } else {\r\n      this.setState({\r\n        inputEdit: this.state.mainCategory,\r\n        originalCategory: this.state.mainCategory, //to identify sub or main cat\r\n        showInputEdit: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  //edit sub category\r\n  editSubCategory = (e) => {\r\n    this.setState({\r\n      inputEdit: e,\r\n      originalCategory: e,\r\n      showInputEdit: true,\r\n    });\r\n  };\r\n\r\n  //delete main/sub category\r\n  deleteBtn = () => {\r\n    //delete main category only\r\n    if (window.confirm('Are you sure to delete?')) {\r\n      if (this.state.mainCategory === this.state.originalCategory) {\r\n        let idToFind = this.props.mainCat.filter(\r\n          (category) => category.name === this.state.mainCategory\r\n        )[0]._id;\r\n        axios\r\n          .delete(`http://localhost:8080/deletecategory/${idToFind}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n              role: this.props.user.role,\r\n            },\r\n          })\r\n          .then((deletedCat) => {\r\n            if (deletedCat.data.error) {\r\n              alert(deletedCat.data.error);\r\n            } else {\r\n              this.updateCategories();\r\n              this.setState({\r\n                inputEdit: '',\r\n                originalCategory: '',\r\n                mainCategory: '--SELECT--',\r\n                showInputEdit: false,\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        //delete sub category only\r\n        let updatedCategory = this.props.mainCat.filter(\r\n          (category) => category.name === this.state.mainCategory\r\n        )[0];\r\n        let idToFind = updatedCategory._id;\r\n        let updatedSubCategory = updatedCategory.sub.filter(\r\n          (subCat) => subCat !== this.state.originalCategory\r\n        );\r\n        updatedCategory.sub = updatedSubCategory;\r\n        this.editCategoryFunction(idToFind, updatedCategory);\r\n      }\r\n    }\r\n  };\r\n\r\n  //cancel updates\r\n  cancelUpdateBtn = () => {\r\n    this.setState({\r\n      showInputEdit: false,\r\n      inputEdit: '',\r\n      originalCategory: '',\r\n    });\r\n  };\r\n\r\n  //to save updated/edited main and sub category\r\n  updateCatBtn = () => {\r\n    //for main category\r\n    if (this.state.mainCategory === this.state.originalCategory) {\r\n      let updatedCategory = this.props.mainCat.filter(\r\n        (category) => category.name === this.state.mainCategory\r\n      )[0];\r\n      updatedCategory.name = this.state.inputEdit;\r\n      let idToFind = updatedCategory._id;\r\n      this.editCategoryFunction(idToFind, updatedCategory);\r\n      this.setState({ mainCategory: '--SELECT--' });\r\n    } else {\r\n      //for sub category\r\n      let updatedCategory = this.props.mainCat.filter(\r\n        (category) => category.name === this.state.mainCategory\r\n      )[0];\r\n      let idToFind = updatedCategory._id;\r\n      let updatedSubCategory = updatedCategory.sub.filter(\r\n        (subCat) => subCat !== this.state.originalCategory\r\n      );\r\n      updatedSubCategory.push(this.state.inputEdit);\r\n      updatedCategory.sub = updatedSubCategory;\r\n      this.editCategoryFunction(idToFind, updatedCategory);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //this mean to control the maincategories and its subcategories\r\n    let sub = this.props.mainCat.filter((main) => {\r\n      return main.name === this.state.mainCategory;\r\n    });\r\n    return (\r\n      <div className=\"main-container-addcategory\">\r\n        <div className=\"mini-container-addcategory\">\r\n          <div className=\"div-for-closed\">\r\n            <span\r\n              onClick={() => {\r\n                this.props.showMyAddCategory(false);\r\n              }}\r\n            >\r\n              X\r\n            </span>\r\n          </div>\r\n          <div className=\"div-for-view-add\">\r\n            <button onClick={this.viewCatBtn}>View Categories</button> |{' '}\r\n            <button onClick={this.addCatBtn}>Add Category</button>\r\n          </div>\r\n\r\n          {/* this is for view categories */}\r\n\r\n          {this.state.showViewCatForm ? (\r\n            <div className=\"main-div-for-showViewCatForm\">\r\n              {this.props.mainCat.length > 0 ? (\r\n                <div className=\"for-mainCat-input\">\r\n                  <div className=\"lblmaincat\">\r\n                    <label>Maincategory</label>\r\n                  </div>\r\n                  <div className=\"div-for-input-maincat-editBtn\">\r\n                    <select\r\n                      className=\"input-maincat\"\r\n                      type=\"text\"\r\n                      value={this.state.mainCategory}\r\n                      onChange={(e) =>\r\n                        this.setState({ mainCategory: e.target.value })\r\n                      }\r\n                    >\r\n                      {' '}\r\n                      <option>--SELECT--</option>\r\n                      {this.props.mainCat.map((cat) => {\r\n                        return <option>{cat.name}</option>;\r\n                      })}\r\n                    </select>{' '}\r\n                    {this.state.mainCategory !== '--SELECT--' ? (\r\n                      <span>\r\n                        <button className=\"editBtn\" onClick={this.editBtn}>\r\n                          EDIT\r\n                        </button>{' '}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                alert('Category is empty !')\r\n              )}\r\n              <br />\r\n              {/*  */}\r\n              {this.state.mainCategory !== '--SELECT--' ? (\r\n                <div className=\"div-for-subCat-input\">\r\n                  {sub.length !== 0 ? (\r\n                    <div className=\"mini-div-subCat-input\">\r\n                      {sub[0].sub.length !== 0 ? (\r\n                        <div className=\"div-for-\">\r\n                          <div className=\"lblmaincat\">\r\n                            <label>Subcategories:</label>\r\n                          </div>\r\n\r\n                          {sub[0].sub.map((subCat) => {\r\n                            return (\r\n                              <div className=\"div-per-subCat\">\r\n                                <div className=\"div-for-spanSubCat\">\r\n                                  <span\r\n                                    onClick={() => {\r\n                                      this.editSubCategory(subCat);\r\n                                    }}\r\n                                  >\r\n                                    {subCat}\r\n                                  </span>\r\n                                </div>{' '}\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </div>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                  <br />\r\n                  {this.state.showInputEdit ? (\r\n                    <div className=\"div-for-input-edit\">\r\n                      <input\r\n                        className=\"input-edit\"\r\n                        type=\"text\"\r\n                        value={this.state.inputEdit}\r\n                        onChange={(e) =>\r\n                          this.setState({ inputEdit: e.target.value })\r\n                        }\r\n                      ></input>{' '}\r\n                      <button className=\"deleteBtn\" onClick={this.deleteBtn}>\r\n                        DELETE\r\n                      </button>{' '}\r\n                      <button\r\n                        className=\"updateCatBtn\"\r\n                        onClick={this.updateCatBtn}\r\n                      >\r\n                        {' '}\r\n                        UPDATE\r\n                      </button>{' '}\r\n                      <button\r\n                        className=\"cancelUpdateBtn\"\r\n                        onClick={this.cancelUpdateBtn}\r\n                      >\r\n                        {' '}\r\n                        CANCEL\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          ) : (\r\n            '' //empty\r\n          )}\r\n\r\n          {/* this is for add categories */}\r\n\r\n          {this.state.showAddCatForm ? (\r\n            <div className=\"main-div-for-showAddCatForm\">\r\n              <div className=\"div-for-newBtn\">\r\n                <button className=\"newBtn\" onClick={this.newBtn}>\r\n                  NEW\r\n                </button>\r\n              </div>\r\n              {/* this is to show/hide new category form to add new subCategory*/}\r\n              {!this.state.showNewCatForm ? (\r\n                <div className=\"mini-div-for-showAddCatForm\">\r\n                  <div className=\"div-lblmaincat\">\r\n                    <label>Maincategory</label>\r\n                  </div>\r\n\r\n                  <select\r\n                    className=\"input-maincat\"\r\n                    value={this.state.mainCategory}\r\n                    onChange={(e) => {\r\n                      this.setState({\r\n                        mainCategory: e.target.value,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option>--SELECT--</option>\r\n                    {this.props.mainCat.map((cat) => {\r\n                      return <option>{cat.name}</option>;\r\n                    })}\r\n                  </select>\r\n                  <br />\r\n                  <div className=\"div-lblsubcat\">\r\n                    <label>Subcategory</label>\r\n                  </div>\r\n                  <input\r\n                    className=\"input-maincat input-for-new-subCat\"\r\n                    type=\"text\"\r\n                    value={this.state.newSubCategory}\r\n                    onChange={(e) => {\r\n                      this.setState({ newSubCategory: e.target.value });\r\n                    }}\r\n                  ></input>\r\n                  <br />\r\n                  <div className=\"div-for-saveBtn\">\r\n                    <button\r\n                      className=\"newSubCatSaveBtn\"\r\n                      onClick={this.newSubCatSaveBtn}\r\n                    >\r\n                      SAVE\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"main-div-for-addNewCategory\">\r\n                  <div className=\"div-for-newMainCat\">\r\n                    <label>Maincategory</label>\r\n                    <br />\r\n                    <input\r\n                      className=\"input-newMainCat\"\r\n                      value={this.state.newMainCategory}\r\n                      onChange={(e) => {\r\n                        this.setState({ newMainCategory: e.target.value });\r\n                      }}\r\n                    ></input>\r\n                    <br />\r\n                    <label>Subcategory</label>\r\n                    <br />\r\n                    <input\r\n                      className=\"input-newSubCat\"\r\n                      value={this.state.newSubCategory}\r\n                      onChange={(e) => {\r\n                        this.setState({ newSubCategory: e.target.value });\r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"div-for-saveBtn\">\r\n                    <button\r\n                      className=\"newCatSaveBtn\"\r\n                      onClick={this.newCatSaveBtn}\r\n                    >\r\n                      SAVE\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n\r\n          {/* this is for new categories */}\r\n\r\n          <div className=\"div-for-showNewCatForm\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    mainCat: store.mainCategories,\r\n    subCategory: store.subCategory,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    mainCategory: (categories) =>\r\n      dispatch({ type: 'ALL_CATEGORIES', payload: categories }),\r\n\r\n    updateCategoryToStore: (categories) =>\r\n      dispatch({ type: 'ALL_CATEGORIES', payload: categories }),\r\n\r\n    showMyAddCategory: (req) =>\r\n      dispatch({ type: 'SHOW_MY_ADD_CATEGORY', payload: req }),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCategory);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\EditItemForm.js",["99","100"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport edititem from '../mycss/edititem.css';\r\n\r\n//dito ako mag-eedit ng mga items\r\nclass EditItemForm extends React.Component {\r\n  state = {\r\n    name: this.props.item.name,\r\n    mainCategory: this.props.item.mainCategory,\r\n    subCategory: this.props.item.subCategory,\r\n    quantity: this.props.item.quantity,\r\n    price: this.props.item.price,\r\n    image: this.props.item.image,\r\n\r\n    displaySrc: this.props.item.image.slice(0)[0],\r\n    originalImgSrc: this.props.items.filter(\r\n      (item) => item._id === this.props.item._id\r\n    )[0].image, //from reducer\r\n    imgSrcEdited: null, //being edited\r\n    imgSrcEditOriginal: null, // to be compared if edited\r\n    addOrNew: false,\r\n    showNewBtn: true,\r\n    showEditBtn: true,\r\n    showRemoveBtn: true,\r\n    showCancelBtn: false,\r\n  };\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    if (prevProps.item !== this.props.item) {\r\n      let updated = this.props.item;\r\n      updated.image = this.props.item.image;\r\n      this.setState({\r\n        name: updated.name,\r\n        mainCategory: updated.mainCategory,\r\n        subCategory: updated.subCategory,\r\n        quantity: updated.quantity,\r\n        price: updated.price,\r\n        image: updated.image,\r\n        displaySrc: updated.image[0],\r\n      });\r\n    } else if (prevProps.items !== this.props.items) {\r\n      this.setState({\r\n        originalImgSrc: this.props.items.filter(\r\n          (item) => item._id === this.props.item._id\r\n        )[0].image,\r\n      });\r\n    }\r\n  };\r\n\r\n  //axios to db\r\n  axiosTheUpdatedItem = (idToFind, updatedItem) => {\r\n    axios\r\n      .put(`http://localhost:8080/updateitem/${idToFind}`, updatedItem, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((originalItem) => {\r\n        if (originalItem.data.error) {\r\n          return alert(originalItem.data.error);\r\n        } else {\r\n          this.updateAllItems();\r\n          alert('Item has been updated');\r\n          this.setState({\r\n            imgSrcEdited: null,\r\n            imgSrcEditOriginal: null,\r\n            displaySrc: '--Select--',\r\n            addOrNew: false,\r\n            showNewBtn: true,\r\n            showEditBtn: true,\r\n            showRemoveBtn: true,\r\n            showCancelBtn: false,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  //will update all items\r\n  updateAllItems = () => {\r\n    axios.get('http://localhost:8080/getitems').then((allItems) => {\r\n      this.props.dispatchToStore(allItems.data);\r\n    });\r\n  };\r\n\r\n  //update the edited items\r\n  updateBtn = () => {\r\n    let filtered = this.props.item.image.filter((img) => {\r\n      return img === this.state.imgSrcEdited;\r\n    });\r\n    let limit =\r\n      this.state.name === this.props.item.name &&\r\n      this.state.mainCategory === this.props.item.mainCategory &&\r\n      this.state.subCategory === this.props.item.subCategory &&\r\n      this.state.quantity === this.props.item.quantity &&\r\n      this.state.price === this.props.item.price &&\r\n      this.state.quantity === this.props.item.quantity;\r\n\r\n    if (limit && this.state.imgSrcEdited === null) {\r\n      return alert('Nothing to update');\r\n    } else if (limit && filtered.length === 1) {\r\n      return alert('Nothing to update');\r\n    } else if (limit && this.state.showNewBtn === true) {\r\n      return alert('Nothing to update');\r\n    } else {\r\n      let idToFind = this.props.item._id;\r\n      let updatedImage = this.state.originalImgSrc.slice(0);\r\n\r\n      if (this.state.imgSrcEditOriginal !== null) {\r\n        updatedImage = updatedImage.filter(\r\n          (img) => img !== this.state.imgSrcEditOriginal\r\n        );\r\n        updatedImage.push(this.state.imgSrcEdited);\r\n      }\r\n      let updatedItem = {\r\n        name: this.state.name,\r\n        mainCategory: this.state.mainCategory,\r\n        subCategory: this.state.subCategory,\r\n        quantity: this.state.quantity,\r\n        price: this.state.price,\r\n        image: updatedImage,\r\n      };\r\n\r\n      console.log(updatedItem);\r\n      this.axiosTheUpdatedItem(idToFind, updatedItem);\r\n    }\r\n  };\r\n\r\n  //Add image\r\n  newImgSrcHandler = () => {\r\n    this.setState({\r\n      imgSrcEdited: '',\r\n      addOrNew: !this.state.addOrNew,\r\n      showEditBtn: !this.state.showEditBtn,\r\n      showRemoveBtn: !this.state.showRemoveBtn,\r\n      showCancelBtn: !this.state.showCancelBtn,\r\n    });\r\n  };\r\n  addImgSrcHandler = () => {\r\n    if (this.state.imgSrcEdited === '') {\r\n      return alert('Nothing to add !');\r\n    }\r\n    let originalImgSrcCopy = this.state.originalImgSrc.slice(0);\r\n    let newImgSrc = this.state.imgSrcEdited;\r\n    originalImgSrcCopy.push(newImgSrc);\r\n    let idToFind = this.props.item._id;\r\n    let updatedItem = {\r\n      image: originalImgSrcCopy,\r\n    };\r\n    console.log(updatedItem);\r\n    this.axiosTheUpdatedItem(idToFind, updatedItem);\r\n\r\n    // alert('New image has been added');\r\n  };\r\n\r\n  //Edit image src\r\n  editImgSrcHandler = () => {\r\n    if (this.state.displaySrc === '--Select--') {\r\n      return alert('Image source is invalid');\r\n    } else if (this.state.showCancelBtn) {\r\n      return alert(\"Edit can't proceed\");\r\n    }\r\n    this.setState({\r\n      imgSrcEdited: this.state.displaySrc,\r\n      imgSrcEditOriginal: this.state.displaySrc,\r\n      showNewBtn: !this.state.showEditBtn,\r\n      showRemoveBtn: !this.state.showRemoveBtn,\r\n      showCancelBtn: !this.state.showCancelBtn,\r\n    });\r\n  };\r\n\r\n  //Remove/Delete img\r\n  removeImg = () => {\r\n    if (this.state.displaySrc === '--Select--') {\r\n      return alert('Image source is invalid');\r\n    }\r\n    if (window.confirm('Are you sure to remove this image?')) {\r\n      let originalImgSrcCopy = this.state.originalImgSrc.slice(0);\r\n      originalImgSrcCopy = originalImgSrcCopy.filter(\r\n        (img) => img !== this.state.displaySrc\r\n      );\r\n      let idToFind = this.props.item._id;\r\n      let updatedItem = {\r\n        image: originalImgSrcCopy,\r\n      };\r\n      console.log(updatedItem);\r\n      this.axiosTheUpdatedItem(idToFind, updatedItem);\r\n    }\r\n  };\r\n\r\n  // cancel the edited items\r\n  cancelOnImg = () => {\r\n    this.setState({\r\n      showNewBtn: true,\r\n      showEditBtn: true,\r\n      showRemoveBtn: true,\r\n      showCancelBtn: !this.state.showCancelBtn,\r\n      addOrNew: false,\r\n      imgSrcEdited: null,\r\n      imgSrcEditOriginal: null,\r\n      newImgSrc: null,\r\n    });\r\n  };\r\n  cancelBtn = () => {\r\n    this.props.addToItemToBeEdited(null);\r\n  };\r\n  render() {\r\n    //for subCategory (array of subCategory)\r\n    let sub = this.props.mainCat.filter((main) => {\r\n      return main.name === this.state.mainCategory;\r\n    });\r\n\r\n    //for image (array of images)\r\n    let images = this.props.items.filter(\r\n      (item) => item._id === this.props.item._id\r\n    )[0].image;\r\n\r\n    // console.log(this.props.items);\r\n    // console.log(this.props.item);\r\n    console.log(images);\r\n\r\n    // console.log(this.state.imgSrcEditOriginal);\r\n    // console.log(this.state.item.image);\r\n    // console.log(this.props.items);\r\n    return (\r\n      <div className=\"main-container-edit\">\r\n        <div className=\"mini-container-edit\">\r\n          <div className=\"div-for-xBtn-edit\">\r\n            <button id=\"xbtn-edit\" onClick={this.cancelBtn}>\r\n              X\r\n            </button>\r\n          </div>\r\n          <div className=\"parent div-for-img-edit\">\r\n            <div className=\"div-for-display-img\">\r\n              <img id=\"display-img\" src={this.state.displaySrc} />\r\n            </div>\r\n            <div className=\"div-for-image-edit\">\r\n              <label>SOURCE OF IMAGE</label>\r\n              <br />\r\n              <select //select\r\n                className=\"input-image-edit\"\r\n                value={this.state.displaySrc}\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    displaySrc: e.target.value,\r\n                  })\r\n                }\r\n              >\r\n                {' '}\r\n                <option>--Select--</option>\r\n                {images.map((img) => {\r\n                  return <option key={img}>{img}</option>;\r\n                })}\r\n              </select>\r\n            </div>\r\n\r\n            {this.state.image === '--Select--' ? (\r\n              '' //if --select-- ang value ng option dapat empty\r\n            ) : (\r\n              <div className=\"div-for-src-edit\">\r\n                {this.state.imgSrcEdited !== null ? (\r\n                  <input //for Edited or new\r\n                    className=\"input-image-edit\"\r\n                    value={this.state.imgSrcEdited}\r\n                    onChange={(e) =>\r\n                      this.setState({\r\n                        imgSrcEdited: e.target.value,\r\n                      })\r\n                    }\r\n                  ></input>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {this.state.addOrNew ? (\r\n                  <button\r\n                    className=\"btns-editItem\"\r\n                    id=\"add-btn\"\r\n                    onClick={this.addImgSrcHandler}\r\n                  >\r\n                    ADD\r\n                  </button>\r\n                ) : this.state.showNewBtn ? (\r\n                  <button\r\n                    className=\"btns-editItem\"\r\n                    id=\"add-btn\"\r\n                    onClick={this.newImgSrcHandler}\r\n                  >\r\n                    NEW\r\n                  </button>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {this.state.showEditBtn ? (\r\n                  <button\r\n                    className=\"btns-editItem\"\r\n                    id=\"edit-btn\"\r\n                    onClick={this.editImgSrcHandler}\r\n                  >\r\n                    EDIT\r\n                  </button>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {this.state.showRemoveBtn ? (\r\n                  <button\r\n                    className=\"btns-editItem\"\r\n                    id=\"delete-btn\"\r\n                    onClick={this.removeImg}\r\n                  >\r\n                    REMOVE\r\n                  </button>\r\n                ) : (\r\n                  ''\r\n                )}\r\n\r\n                {this.state.showCancelBtn ? (\r\n                  <button\r\n                    className=\"btns-editItem\"\r\n                    id=\"delete-btn\"\r\n                    onClick={this.cancelOnImg}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\" parent div-for-main-content-edit\">\r\n            <div className=\"div-for-item-name-edit\">\r\n              <label>Item name</label>\r\n              <br />\r\n              <input\r\n                className=\"input-item-name-edit\"\r\n                value={this.state.name}\r\n                onChange={(e) => {\r\n                  this.setState({ name: e.target.value });\r\n                }}\r\n              ></input>\r\n            </div>\r\n            <div className=\"div-for-mainCategory-edit\">\r\n              <label>Maincategory</label>\r\n              <br />\r\n              <select\r\n                className=\"input-mainCategory-edit\"\r\n                value={this.state.mainCategory}\r\n                onChange={(e) => {\r\n                  this.setState({ mainCategory: e.target.value });\r\n                }}\r\n              >\r\n                <option>{this.state.mainCategory}</option>\r\n                {this.props.mainCat.map((cat) => {\r\n                  return <option key={cat.name}>{cat.name}</option>;\r\n                })}\r\n              </select>\r\n            </div>\r\n            <div className=\"div-for-subCategory-edit\">\r\n              <label>Subcategory</label>\r\n              <br />\r\n              <select\r\n                className=\"input-subCategory-edit\"\r\n                value={this.state.subCategory}\r\n                onChange={(e) => {\r\n                  this.setState({ subCategory: e.target.value });\r\n                }}\r\n              >\r\n                <option>{this.state.subCategory}</option>\r\n                {sub.length !== 0\r\n                  ? sub[0].sub.map((subCat) => {\r\n                      return <option key={subCat}>{subCat}</option>;\r\n                    })\r\n                  : ''}\r\n              </select>\r\n            </div>\r\n            <div className=\"div-for-quantity-edit\">\r\n              <label>Quantity</label>\r\n              <br />\r\n              <input\r\n                className=\"input-quantity-edit\"\r\n                value={this.state.quantity}\r\n                onChange={(e) => {\r\n                  this.setState({ quantity: e.target.value });\r\n                }}\r\n              ></input>\r\n            </div>\r\n            <div className=\"div-for-price-edit\">\r\n              <label>Price</label>\r\n              <br />\r\n              <input\r\n                className=\"input-price-edit\"\r\n                value={this.state.price}\r\n                onChange={(e) => {\r\n                  this.setState({ price: e.target.value });\r\n                }}\r\n              ></input>\r\n            </div>\r\n\r\n            <div className=\"div-for-update-cancel-edit\">\r\n              <button className=\"updateBtn-edit\" onClick={this.updateBtn}>\r\n                UPDATE\r\n              </button>\r\n              <button className=\"cancelBtn-edit\" onClick={this.cancelBtn}>\r\n                CANCEL\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    items: store.items,\r\n    mainCat: store.mainCategories,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToItemToBeEdited: (item) =>\r\n      dispatch({ type: 'EDIT_ITEM', payload: item }),\r\n\r\n    dispatchToStore: (allItems) =>\r\n      dispatch({ type: 'DISPATCH_ALL_ITEMS', payload: allItems }),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditItemForm);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCartMap.js",["101","102"],"import axios from 'axios';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MyCart from './MyCart';\r\nimport { Link } from 'react-router-dom';\r\n// import Transactions from './Transactions';\r\nimport mycartstyle from '../mycss/mycart.css';\r\n//dito ako mag-lalagay ng mga items na nasa cart\r\nclass MyCartMap extends React.Component {\r\n  state = {\r\n    quantity: 1,\r\n    itemsInMyCartCopy: this.props.myCartCopy //array of object(all items in my cart)\r\n      ? this.props.myCartCopy.slice(0)\r\n      : null,\r\n    myCheckout: [], //container of my order\r\n    remainsOnMyCart: [],\r\n    date: new Date(),\r\n    selectAll: this.props.selectAll,\r\n    selectAllItems: false, //pang check all or uncheck all\r\n    subTotal: 0,\r\n  };\r\n  selectAll = () => {\r\n    this.setState({ selectAllItems: !this.state.selectAllItems });\r\n\r\n    this.props.toSelectAll(!this.props.selectAll); //to check all\r\n    let myCheckOutItemsCopy = this.props.myCheckOutItems.slice(0);\r\n    let myCartCopy = this.props.myCartCopy.filter(\r\n      (inMyCart) => inMyCart.user === this.props.user.username\r\n    );\r\n    console.log(myCheckOutItemsCopy);\r\n    console.log(myCartCopy);\r\n\r\n    if (this.state.selectAllItems) {\r\n      //magtotrue yan sa pangalawang click. pang empty, pang uncheck sa lahat\r\n      alert('dapat empty na');\r\n      this.props.addToCheckOut([]);\r\n    } else {\r\n      //1st ,3rd ,5th click\r\n      if (myCheckOutItemsCopy.length > 0) {\r\n        alert('my na checked kana');\r\n        myCartCopy.forEach((originalItemInCart) => {\r\n          let filtered = myCheckOutItemsCopy.filter((inMyCheckOut) => {\r\n            return originalItemInCart.name === inMyCheckOut.name;\r\n          });\r\n\r\n          if (filtered.length === 0) {\r\n            myCheckOutItemsCopy.push(originalItemInCart);\r\n            //item na hindi pa na check\r\n          }\r\n        });\r\n      } else {\r\n        alert('di kapa nakapag check');\r\n        myCheckOutItemsCopy = myCartCopy;\r\n      }\r\n      this.props.addToCheckOut(myCheckOutItemsCopy);\r\n    }\r\n\r\n    console.log(myCheckOutItemsCopy);\r\n    console.log(myCartCopy);\r\n  };\r\n\r\n  checkOutBtn = () => {\r\n    this.props.placeOrder(this.props.myCheckOutItems.slice(0));\r\n    this.props.toSelectAll(false); //to check/uncheck all\r\n    this.props.addToCheckOut([]); //to empty the checkout\r\n  };\r\n  //\r\n  componentDidUpdate = (prevProps) => {\r\n    if (prevProps.selectAll !== this.props.selectAll) {\r\n      this.setState({ selectAll: this.props.selectAll });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props.myCheckOutItems);\r\n    console.log(this.props.myCart);\r\n    let subTotalDisplay = 0; //total price display @ bottom of cart\r\n    if (this.props.myCheckOutItems.length > 0) {\r\n      this.props.myCheckOutItems.forEach((sub) => {\r\n        subTotalDisplay += sub.subTotal;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"cart-main-container\">\r\n        {this.props.user ? (\r\n          this.props.myCart !== null &&\r\n          this.props.myCart.filter(\r\n            (item) => item.user === this.props.user.username\r\n          ).length !== 0 ? (\r\n            <div className=\"mini-container-mycart\">\r\n              <div\r\n                className=\"\r\n              my-cart-text\"\r\n              >\r\n                <p>MY CART</p>\r\n              </div>\r\n\r\n              <div className=\"div-description-bar\">\r\n                <div className=\"div-description-name\">\r\n                  <span>Product</span>\r\n                </div>\r\n                <div className=\"div-description-quantity\">\r\n                  <span>Quantity</span>\r\n                </div>\r\n                <div className=\"div-description-price\">\r\n                  <span>Price</span>\r\n                </div>\r\n                <div className=\"div-description-total\">\r\n                  <span>Total</span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* map myCart */}\r\n              {\r\n                this.props.myCart\r\n                  .filter((item) => item.user === this.props.user.username)\r\n                  .map((item) => {\r\n                    return (\r\n                      <MyCart\r\n                        item={item}\r\n                        key={item.name}\r\n                        selectAll={this.state.selectAll}\r\n                      />\r\n                    );\r\n                  })\r\n                //\r\n              }\r\n\r\n              {/* div below cart items */}\r\n              <div className=\"div-for-check-all\">\r\n                <div className=\"div-for-item-checkall\">\r\n                  <span onClick={this.selectAll} id=\"span-input-all\">\r\n                    <input\r\n                      onChange={(e) => {\r\n                        console.log(e.target.value);\r\n                      }}\r\n                      type=\"checkbox\"\r\n                      checked={this.state.selectAll}\r\n                    ></input>\r\n                  </span>{' '}\r\n                  <span id=\"span-all\">All</span>\r\n                </div>\r\n                <span className=\"span-sub-total\">Php {subTotalDisplay}</span>\r\n                <div className=\"div-for-check-out\">\r\n                  {this.props.myCheckOutItems.length > 0 ? (\r\n                    <Link to=\"/mycheckout\">\r\n                      <button\r\n                        className=\"checkOutBtn\"\r\n                        onClick={this.checkOutBtn}\r\n                      >\r\n                        CHECK OUT\r\n                      </button>\r\n                    </Link>\r\n                  ) : (\r\n                    <button className=\"checkOutBtn-disabled\" disabled>\r\n                      CHECK OUT\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <div>Your cart is empty!</div>\r\n              <div>\r\n                <button>ADD NOW</button>\r\n              </div>\r\n            </div>\r\n          )\r\n        ) : (\r\n          <div>Login to see your cart items</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    myCart: store.myCart,\r\n    myCartCopy: store.myCartCopy,\r\n    myCheckOutItems: store.myCheckOutItems,\r\n    checkOutBtn: store.checkOutBtn,\r\n    selectAll: store.selectAll,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToCheckOut: (myOrder) =>\r\n      dispatch({ type: 'ADD_TO_CHECKOUT', payload: myOrder }),\r\n    toSelectAll: (req) => dispatch({ type: 'SELECT_ALL', payload: req }),\r\n    placeOrder: (req) => dispatch({ type: 'PLACE_ORDER', payload: req }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyCartMap);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\Transactions.js",["103"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport transaactions from '../mycss/transactions.css';\r\nclass Transactions extends React.Component {\r\n  state = {\r\n    shoppingHistory: [],\r\n\r\n    showMyCompleted: false,\r\n    showMyToReceive: false,\r\n    showMyPending: true,\r\n  };\r\n\r\n  myCompletedHandler = () => {\r\n    this.setState({\r\n      showMyCompleted: true,\r\n      showMyToReceive: false,\r\n      showMyPending: false,\r\n    });\r\n  };\r\n  myToReceiveHandler = () => {\r\n    this.setState({\r\n      showMyCompleted: false,\r\n      showMyToReceive: true,\r\n      showMyPending: false,\r\n    });\r\n  };\r\n  myPendingHandler = () => {\r\n    this.setState({\r\n      showMyCompleted: false,\r\n      showMyToReceive: false,\r\n      showMyPending: true,\r\n    });\r\n  };\r\n  componentDidMount = () => {\r\n    axios\r\n      .get(\r\n        `http://localhost:8080/users/${\r\n          JSON.parse(localStorage.getItem('user'))._id\r\n        }`\r\n      )\r\n      .then((res) => {\r\n        // console.log(res.data.orders);\r\n        let all = this.state.shoppingHistory.slice(0);\r\n        all = res.data.orders;\r\n        this.setState({ shoppingHistory: all });\r\n      });\r\n  };\r\n  willUpdateOrdersDisplay = () => {\r\n    axios\r\n      .get(\r\n        `http://localhost:8080/users/${\r\n          JSON.parse(localStorage.getItem('user'))._id\r\n        }`\r\n      )\r\n      .then((res) => {\r\n        // console.log(res.data.orders);\r\n        let all = this.state.shoppingHistory.slice(0);\r\n        all = res.data.orders;\r\n        this.setState({ shoppingHistory: all });\r\n      });\r\n  };\r\n\r\n  //once order has been received\r\n  receivedBtn = (idToFind, items, idOfIndividualItem) => {\r\n    // this.receiveIndividual(idToFind, idOfIndividualItem);\r\n    let pendingAndAcceptedSiblings = items.filter(\r\n      (item) => item.status === 'pending' || item.status === 'accepted'\r\n    );\r\n    let acceptedSiblings = items.filter((item) => item.status === 'accepted');\r\n    let shippedSiblings = items.filter((item) => item.status === 'shipped');\r\n    if (\r\n      pendingAndAcceptedSiblings.length === 0 &&\r\n      shippedSiblings.length <= 1\r\n    ) {\r\n      let status = {\r\n        status: { status: 'received' },\r\n        statusOfIndividualItem: 'received',\r\n        idOfIndividualItem: idOfIndividualItem,\r\n      };\r\n      this.receiveIndividual(idToFind, status);\r\n    } else if (acceptedSiblings.length === 0 && shippedSiblings.length <= 1) {\r\n      let status = {\r\n        status: { status: 'pending' },\r\n        statusOfIndividualItem: 'received',\r\n        idOfIndividualItem: idOfIndividualItem,\r\n      };\r\n      this.receiveIndividual(idToFind, status);\r\n    } else {\r\n      let status = {\r\n        statusOfIndividualItem: 'received',\r\n        idOfIndividualItem: idOfIndividualItem,\r\n      };\r\n      this.receiveIndividual(idToFind, status);\r\n    }\r\n  };\r\n\r\n  receiveIndividual = (idToFind, status) => {\r\n    axios\r\n      .put(`http://localhost:8080/receiveorder/${idToFind}`, status, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.error) {\r\n          alert(res.data.error);\r\n        } else {\r\n          console.log(res.data);\r\n          this.willUpdateOrdersDisplay();\r\n        }\r\n      });\r\n  };\r\n\r\n  //cancel order\r\n  cancelHandler = (mainItem, individualItem) => {\r\n    // return alert(mainItem._id);\r\n    let idToFind = mainItem._id;\r\n    if (mainItem.items.length > 1) {\r\n      // return alert('greater');\r\n      let status = {\r\n        idOfIndividualItem: individualItem._id,\r\n      };\r\n      axios\r\n        .put(`http://localhost:8080/cancelorder/${idToFind}`, status, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n            role: this.props.user.role,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.error) {\r\n            alert(res.data.error);\r\n          } else {\r\n            console.log(res.data);\r\n            this.willUpdateOrdersDisplay();\r\n          }\r\n        });\r\n    } else {\r\n      // return alert('less');\r\n      axios\r\n        .delete(`http://localhost:8080/cancelorder/${idToFind}`, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n            role: this.props.user.role,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.error) {\r\n            alert(res.data.error);\r\n          } else {\r\n            console.log(res.data);\r\n            this.willUpdateOrdersDisplay();\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.shoppingHistory);\r\n    // if (this.state.shoppingHistory.length > 0) {\r\n    //   console.log(this.state.shoppingHistory);\r\n    // }\r\n\r\n    return (\r\n      <div className=\"main-container-transaactions\">\r\n        <div className=\"header-transactions\">\r\n          <div onClick={this.myPendingHandler}>PENDING</div>\r\n          <div onClick={this.myToReceiveHandler}>TO RECEIVE</div>\r\n          <div onClick={this.myCompletedHandler}>COMPLETED</div>\r\n        </div>\r\n\r\n        {/* pending */}\r\n\r\n        {this.state.showMyPending ? (\r\n          <div className=\"mini-container-transactions\">\r\n            <div className=\"my-purchase-text\">Pending</div>\r\n            {this.state.shoppingHistory.length !== 0\r\n              ? this.state.shoppingHistory\r\n                  .filter(\r\n                    (item) =>\r\n                      item.status === 'pending' || item.status === 'portion'\r\n                  )\r\n                  .map((mainItem) => {\r\n                    return mainItem.items\r\n                      .filter((item) => item.status === 'pending')\r\n                      .map((el) => {\r\n                        return (\r\n                          <div\r\n                            className=\"div-per-item-transaction\"\r\n                            key={el._id}\r\n                          >\r\n                            <div className=\"div-for-img\">\r\n                              <img\r\n                                className=\"img-transactions\"\r\n                                src={el.image}\r\n                                alt={el.name}\r\n                              />\r\n                            </div>\r\n                            <div className=\"div-for-content-transactions\">\r\n                              <p className=\"strong-transaction\">{el.name}</p>\r\n                              <span className=\"span-quantity\">\r\n                                Quantity {el.quantity}\r\n                              </span>\r\n\r\n                              <span>Price Php {el.price}</span>\r\n                              <span>Total Php {el.price * el.quantity}</span>\r\n                              <div className=\"div-for-date\">\r\n                                {mainItem.date.slice(0, 10)}\r\n                              </div>\r\n                              <div className=\"div-for-receive-btn\">\r\n                                <button\r\n                                  id=\"cancelBtn\"\r\n                                  onClick={() =>\r\n                                    this.cancelHandler(mainItem, el)\r\n                                  }\r\n                                >\r\n                                  Cancel\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      });\r\n                  })\r\n              : ''}\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {/* to received */}\r\n\r\n        {this.state.showMyToReceive ? (\r\n          <div className=\"mini-container-transactions\">\r\n            <div className=\"my-purchase-text\">To Receive</div>\r\n            {this.state.shoppingHistory.length !== 0\r\n              ? this.state.shoppingHistory\r\n                  .filter(\r\n                    (item) =>\r\n                      item.status === 'shipped' ||\r\n                      item.status === 'portion' ||\r\n                      item.status === 'accepted' ||\r\n                      item.status === 'received'\r\n                  )\r\n                  .map((item) => {\r\n                    return item.items\r\n                      .filter((item) => item.status === 'shipped')\r\n                      .map((el) => {\r\n                        return (\r\n                          <div\r\n                            className=\"div-per-item-transaction\"\r\n                            key={el._id}\r\n                          >\r\n                            <div className=\"div-for-img\">\r\n                              <img\r\n                                className=\"img-transactions\"\r\n                                src={el.image}\r\n                                alt={el.name}\r\n                              />\r\n                            </div>\r\n                            <div className=\"div-for-content-transactions\">\r\n                              <strong className=\"strong-transaction\">\r\n                                {el.name}\r\n                              </strong>\r\n                              <span className=\"span-quantity\">\r\n                                Quantity {el.quantity}\r\n                              </span>\r\n\r\n                              <span>Price Php {el.price}</span>\r\n                              <span>Total Php {el.price * el.quantity}</span>\r\n                              <div className=\"div-for-date\">\r\n                                {item.date.slice(0, 10)}\r\n                              </div>\r\n                              <div className=\"div-for-receive-btn\">\r\n                                <button\r\n                                  id=\"receivedBtn\"\r\n                                  onClick={() => {\r\n                                    this.receivedBtn(\r\n                                      item._id,\r\n                                      item.items,\r\n                                      el._id\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Received\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      });\r\n                  })\r\n              : ''}\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {/* completed */}\r\n\r\n        {this.state.showMyCompleted ? (\r\n          <div className=\"mini-container-transactions\">\r\n            <div className=\"my-purchase-text\">My Purchases</div>\r\n            {this.state.shoppingHistory.length !== 0\r\n              ? this.state.shoppingHistory.map((item) => {\r\n                  return item.items\r\n                    .filter((item) => item.status === 'received')\r\n                    .map((el) => {\r\n                      return (\r\n                        <div className=\"div-per-item-transaction\" key={el._id}>\r\n                          <div className=\"div-for-img\">\r\n                            <img\r\n                              className=\"img-transactions\"\r\n                              src={el.image}\r\n                              alt={el.name}\r\n                            />\r\n                          </div>\r\n                          <div className=\"div-for-content-transactions\">\r\n                            <strong className=\"strong-transaction\">\r\n                              {el.name}\r\n                            </strong>\r\n                            <span className=\"span-quantity\">\r\n                              Quantity {el.quantity}\r\n                            </span>\r\n\r\n                            <span>Price Php {el.price}</span>\r\n                            <span>Total Php {el.price * el.quantity}</span>\r\n                            <div className=\"div-for-date\">\r\n                              {item.date.slice(0, 10)}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    });\r\n                })\r\n              : ''}\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    showAddItem: store.showAddItem,\r\n    showAddCategory: store.showAddCategory,\r\n    orders: store.orders,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Transactions);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\UserProfile.js",[],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\AdminView.js",["104"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport adminstyle from '../mycss/adminstyle.css';\r\nimport AddItemForm from './AddItemForm';\r\nimport AddCategory from './AddCategory';\r\nclass AdminView extends React.Component {\r\n  state = {\r\n    showMyPurchase: true,\r\n    showMyCompleted: false,\r\n    showAddItem: false,\r\n    showAddCategory: false,\r\n  };\r\n\r\n  addCategoryBtn = () => {\r\n    this.props.showMyAddCategory(true);\r\n  };\r\n  addItemyBtn = () => {\r\n    this.props.showMyAddItem(true);\r\n  };\r\n\r\n  xCategoryBtn = () => {\r\n    this.setState({ showAddCategory: false });\r\n  };\r\n  xAddItemyBtn = () => {\r\n    this.setState({ showAddItem: false });\r\n  };\r\n  componentDidMount = () => {\r\n    axios.get(`http://localhost:8080/getorder`).then((res) => {\r\n      // console.log(res.data);\r\n      //localStorage.setItem('order', JSON.stringify(res.data));\r\n      this.props.saveOrders(res.data);\r\n    });\r\n  };\r\n  //reload updated orders\r\n  willUpdateOrders = () => {\r\n    axios.get(`http://localhost:8080/getorder`).then((res) => {\r\n      this.props.saveOrders(res.data);\r\n    });\r\n  };\r\n\r\n  //individual update\r\n  updateIndividualItem = (idToFind, status) => {\r\n    axios\r\n      .put(`http://localhost:8080/acceptindividual/${idToFind}`, status, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.error) {\r\n          alert(res.data.error);\r\n        } else {\r\n          console.log(res.data);\r\n          this.willUpdateOrders();\r\n        }\r\n      });\r\n  };\r\n\r\n  //update main status and individual status\r\n  updateMainItem = (idToFind, status) => {\r\n    axios\r\n      .put(`http://localhost:8080/acceptorder/${idToFind}`, status, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n          role: this.props.user.role,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.error) {\r\n          alert(res.data.error);\r\n        } else {\r\n          console.log(res.data);\r\n          this.willUpdateOrders();\r\n        }\r\n      });\r\n  };\r\n\r\n  //accept individual order\r\n  acceptBtn = (idOfIndividualItem, idToFind, arrayOfIndividualItem) => {\r\n    let arrayOfItems = arrayOfIndividualItem.filter(\r\n      (item) => item.status === 'pending'\r\n    );\r\n    if (arrayOfItems.length === 1) {\r\n      this.acceptAllBtn(idToFind);\r\n    } else {\r\n      let status = {\r\n        status: { status: 'portion' },\r\n        statusOfIndividualItem: 'accepted',\r\n        idOfIndividualItem: idOfIndividualItem,\r\n      };\r\n      this.updateIndividualItem(idToFind, status);\r\n    }\r\n  };\r\n\r\n  //accept all orders\r\n  acceptAllBtn = (idToFind) => {\r\n    let status = {\r\n      status: { status: 'accepted' },\r\n      statusOfIndividualItem: 'accepted',\r\n    };\r\n    this.updateMainItem(idToFind, status);\r\n  };\r\n\r\n  //send individual order\r\n  sendHandler = (idOfIndividualItem, idToFind, arrayOfIndividualItem) => {\r\n    let pendingItemsOfAnOrder = arrayOfIndividualItem.filter(\r\n      (pendingItem) => pendingItem.status === 'pending'\r\n    );\r\n    let acceptedItemsOfAnOrder = arrayOfIndividualItem.filter(\r\n      (acceptedItem) => acceptedItem.status === 'accepted'\r\n    );\r\n    if (\r\n      pendingItemsOfAnOrder.length === 0 &&\r\n      acceptedItemsOfAnOrder.length === 1\r\n    ) {\r\n      let status = { status: { status: 'shipped' } };\r\n      this.updateMainItem(idToFind, status);\r\n    } else {\r\n      let status = {\r\n        statusOfIndividualItem: 'shipped',\r\n        idOfIndividualItem: idOfIndividualItem,\r\n      };\r\n      this.updateIndividualItem(idToFind, status);\r\n    }\r\n  };\r\n  //send all orders\r\n  sendAllHandler = (idToFind, arrayOfIndividualItem) => {\r\n    let pendingItemsOfAnOrder = arrayOfIndividualItem.filter(\r\n      (pendingItem) => pendingItem.status === 'pending'\r\n    );\r\n    if (pendingItemsOfAnOrder.length > 0) {\r\n      return alert(\r\n        `This order has ${pendingItemsOfAnOrder.length} pending item/s`\r\n      );\r\n    } else {\r\n      let status = {\r\n        status: { status: 'shipped' },\r\n        statusOfIndividualItem: 'shipped',\r\n      };\r\n      this.updateMainItem(idToFind, status);\r\n    }\r\n  };\r\n\r\n  //cancel\r\n  cancelBtn = (status) => {\r\n    alert(status);\r\n  };\r\n  cancelAllShipment = (idToFind, arrayOfIndividualItem) => {\r\n    let pendingItemsOfAnOrder = arrayOfIndividualItem.filter(\r\n      (pendingItem) => pendingItem.status === 'pending'\r\n    );\r\n    if (pendingItemsOfAnOrder.length > 0) {\r\n      return alert(\r\n        `This order has ${pendingItemsOfAnOrder.length} pending item/s`\r\n      );\r\n    } else {\r\n      alert('pede mo i cancel');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props.user);\r\n    // if (this.state.shoppingHistory.length > 0) {\r\n    //   console.log(this.state.shoppingHistory);\r\n    // }\r\n\r\n    return (\r\n      <div className=\"main-container-admin\">\r\n        <div className=\"div-for-addBtns\">\r\n          <button onClick={this.addItemyBtn}>ADD ITEM</button>\r\n          <button onClick={this.addCategoryBtn}>ADD CATEGORY</button>\r\n        </div>\r\n        {this.props.showAddItem ? <AddItemForm /> : ''}\r\n        {this.props.showAddCategory ? <AddCategory /> : ''}\r\n        <div className=\"header-admin\">\r\n          <div className=\"complete-admin\">PENDING</div>\r\n          <div className=\"pending-admin\">TO SHIP</div>\r\n        </div>\r\n        {/* PENDING */}\r\n        <div className=\"mini-container-admin\">\r\n          {this.props.orders !== null\r\n            ? this.props.orders\r\n                .filter(\r\n                  (order) =>\r\n                    order.status === 'pending' || order.status === 'portion'\r\n                )\r\n                .map((pendingOrder) => {\r\n                  return (\r\n                    <div key={pendingOrder._id} id=\"div-group-of-orders\">\r\n                      {pendingOrder.items\r\n                        .filter((item) => item.status === 'pending')\r\n                        .map((final) => {\r\n                          return (\r\n                            <div\r\n                              key={final.name}\r\n                              className=\"div-per-item-admin\"\r\n                            >\r\n                              <div className=\"div-for-img-admin\">\r\n                                <img\r\n                                  className=\"img-admin\"\r\n                                  src={final.image}\r\n                                  alt={final.name}\r\n                                />\r\n                              </div>\r\n\r\n                              <div className=\"div-for-content-admin\">\r\n                                <div className=\"div-description\">\r\n                                  <span className=\"name-of-item span\">\r\n                                    Item Name\r\n                                  </span>\r\n                                  <span className=\"span\">Quantity</span>\r\n                                  <span className=\"span\">Price</span>\r\n                                </div>\r\n\r\n                                <div className=\"div-description\">\r\n                                  <span className=\"name-of-item span\">\r\n                                    {final.name}\r\n                                  </span>\r\n                                  <span className=\"span\">{final.quantity}</span>\r\n                                  <span className=\"span\">{final.price}</span>\r\n                                </div>\r\n\r\n                                <div id=\"div-for-subtotal\">\r\n                                  <span id=\"span-sub-total\" className=\"span\">\r\n                                    Total: {final.quantity * final.price}\r\n                                  </span>\r\n                                </div>\r\n\r\n                                <div className=\"div-for-Btn accept-cancel\">\r\n                                  <button\r\n                                    className=\"acceptBtn\"\r\n                                    onClick={() => {\r\n                                      this.acceptBtn(\r\n                                        final._id, //individual id\r\n                                        pendingOrder._id, //group of items id\r\n                                        pendingOrder.items //array of individual items\r\n                                      );\r\n                                    }}\r\n                                  >\r\n                                    ACCEPT\r\n                                  </button>{' '}\r\n                                  <button className=\"deleteBtn\">CANCEL</button>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n\r\n                      {pendingOrder.items.filter(\r\n                        (item) => item.status === 'pending'\r\n                      ).length === 1 ? (\r\n                        ''\r\n                      ) : (\r\n                        <div className=\"div-for-Btn acceptAll-cancel\">\r\n                          <button\r\n                            className=\"acceptBtn\"\r\n                            onClick={() => this.acceptAllBtn(pendingOrder._id)}\r\n                          >\r\n                            ACCEPT ALL\r\n                          </button>{' '}\r\n                          <button\r\n                            className=\"deleteBtn\"\r\n                            onClick={() => {\r\n                              this.cancelBtn(pendingOrder.status);\r\n                            }}\r\n                          >\r\n                            CANCEL ALL\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n\r\n                      <div id=\"div-for-date\">\r\n                        <span>{pendingOrder.date.slice(0, 10)}</span>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n            : ''}\r\n        </div>\r\n        {/* to ship */}\r\n        <div className=\"mini-container-admin\">\r\n          {this.props.orders !== null\r\n            ? this.props.orders\r\n                .filter(\r\n                  (order) =>\r\n                    order.status === 'accepted' ||\r\n                    order.status === 'portion' ||\r\n                    order.status === 'shipped'\r\n                )\r\n                .map((pendingOrder) => {\r\n                  return (\r\n                    <div key={pendingOrder._id} id=\"div-group-of-orders\">\r\n                      {pendingOrder.items\r\n                        .filter(\r\n                          (item) =>\r\n                            item.status === 'accepted' ||\r\n                            item.status === 'shipped'\r\n                        )\r\n                        .map((final) => {\r\n                          return (\r\n                            <div\r\n                              key={final.name}\r\n                              className=\"div-per-item-admin\"\r\n                            >\r\n                              <div className=\"div-for-img-admin\">\r\n                                <img\r\n                                  className=\"img-admin\"\r\n                                  src={final.image}\r\n                                  alt={final.name}\r\n                                />\r\n                              </div>\r\n\r\n                              <div className=\"div-for-content-admin\">\r\n                                <div className=\"div-description\">\r\n                                  <span className=\"name-of-item span\">\r\n                                    Item Name\r\n                                  </span>\r\n                                  <span className=\"span\">Quantity</span>\r\n                                  <span className=\"span\">Price</span>\r\n                                </div>\r\n\r\n                                <div className=\"div-description\">\r\n                                  <span className=\"name-of-item span\">\r\n                                    {final.name}\r\n                                  </span>\r\n                                  <span className=\"span\">{final.quantity}</span>\r\n                                  <span className=\"span\">{final.price}</span>\r\n                                </div>\r\n\r\n                                <div id=\"div-for-subtotal\">\r\n                                  <span id=\"span-sub-total\" className=\"span\">\r\n                                    Total: {final.quantity * final.price}\r\n                                  </span>\r\n                                </div>\r\n\r\n                                {final.status === 'shipped' ? (\r\n                                  <div className=\"div-for-Btn accept-cancel\">\r\n                                    <button className=\"acceptBtn shipped\">\r\n                                      SHIPPED\r\n                                    </button>\r\n                                  </div>\r\n                                ) : (\r\n                                  <div className=\"div-for-Btn accept-cancel\">\r\n                                    <button\r\n                                      className=\"acceptBtn\"\r\n                                      onClick={() => {\r\n                                        this.sendHandler(\r\n                                          final._id, //individual id\r\n                                          pendingOrder._id, //group of items id\r\n                                          pendingOrder.items //array of individual items\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      SEND\r\n                                    </button>{' '}\r\n                                    <button className=\"deleteBtn\">\r\n                                      CANCEL\r\n                                    </button>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n\r\n                      <div className=\"div-for-Btn acceptAll-cancel\">\r\n                        {pendingOrder.status !== 'shipped' ? (\r\n                          //if shipped all, no send all\r\n                          <button\r\n                            className=\"acceptBtn\"\r\n                            onClick={() =>\r\n                              this.sendAllHandler(\r\n                                pendingOrder._id,\r\n                                pendingOrder.items\r\n                              )\r\n                            }\r\n                          >\r\n                            SEND ALL\r\n                          </button>\r\n                        ) : (\r\n                          ''\r\n                        )}{' '}\r\n                        <button\r\n                          className=\"deleteBtn\"\r\n                          onClick={() => {\r\n                            this.cancelAllShipment(\r\n                              pendingOrder._id,\r\n                              pendingOrder.items\r\n                            );\r\n                          }}\r\n                        >\r\n                          CANCEL ALL\r\n                        </button>\r\n                      </div>\r\n\r\n                      <div id=\"div-for-date\">\r\n                        <span>{pendingOrder.date.slice(0, 10)}</span>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n            : ''}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    showAddItem: store.showAddItem,\r\n    showAddCategory: store.showAddCategory,\r\n    orders: store.orders,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    showMyAddItem: (req) =>\r\n      dispatch({ type: 'SHOW_MY_ADD_ITEM', payload: req }),\r\n    showMyAddCategory: (req) =>\r\n      dispatch({ type: 'SHOW_MY_ADD_CATEGORY', payload: req }),\r\n    saveOrders: (orders) => dispatch({ type: 'SAVE_ORDERS', payload: orders }),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminView);\r\n","C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\MyCheckOut.js",["105"],"C:\\Users\\user\\Documents\\projects\\project3\\frontend\\src\\components\\PreviewItem.js",["106","107","108"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport preview from '../mycss/preview.css';\r\nclass PreviewItem extends React.Component {\r\n  state = {\r\n    quantity: 1,\r\n    imageIndex: 0,\r\n    buyNow: false,\r\n  };\r\n  arrowLeft = () => {\r\n    if (this.state.imageIndex === 0) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      imageIndex: this.state.imageIndex - 1,\r\n    });\r\n  };\r\n  arrowRight = () => {\r\n    let imgIndex = this.props.item.image.length;\r\n    if (this.state.imageIndex === imgIndex - 1) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      imageIndex: this.state.imageIndex + 1,\r\n    });\r\n  };\r\n\r\n  //buyNow\r\n  buyNowBtn = () => {\r\n    if (this.props.user === null) {\r\n      return alert('Please login to proceed');\r\n    }\r\n    let buyNow = [];\r\n    let myOrder = {\r\n      name: this.props.item.name,\r\n      quantity: Number(this.state.quantity),\r\n      price: this.props.item.price,\r\n      mainCategory: this.props.item.mainCategory,\r\n      subCategory: this.props.item.subCategory,\r\n      subTotal: this.props.item.price * this.state.quantity,\r\n      image: this.props.item.image[0],\r\n      status: 'pending',\r\n      user: this.props.user.username,\r\n    };\r\n    buyNow.push(myOrder);\r\n    this.props.placeOrder(buyNow);\r\n    this.setState({ buyNow: true });\r\n  };\r\n\r\n  //order and send to local storage as myCart\r\n  addToCartBtn = () => {\r\n    if (this.props.user === null) {\r\n      return alert('Please login to proceed');\r\n    }\r\n    let myOrder = {\r\n      name: this.props.item.name,\r\n      quantity: Number(this.state.quantity),\r\n      price: this.props.item.price,\r\n      mainCategory: this.props.item.mainCategory,\r\n      subCategory: this.props.item.subCategory,\r\n      subTotal: this.props.item.price * this.state.quantity,\r\n      image: this.props.item.image[0],\r\n      status: 'pending',\r\n      user: this.props.user.username,\r\n    };\r\n\r\n    let myCart;\r\n    if (JSON.parse(localStorage.getItem('myCart')) !== null) {\r\n      myCart = JSON.parse(localStorage.getItem('myCart'));\r\n      let exist = myCart.filter((inMyCart) => inMyCart.name === myOrder.name);\r\n      exist = exist.filter(\r\n        (myExist) => myExist.user === this.props.user.username\r\n      );\r\n      if (exist.length > 0) {\r\n        console.log('meron');\r\n        exist[0].quantity += myOrder.quantity;\r\n        exist[0].subTotal = exist[0].quantity * exist[0].price;\r\n        myCart.forEach((inMyCart, index) => {\r\n          if (\r\n            inMyCart.name === exist[0].name &&\r\n            inMyCart.user === exist[0].user\r\n          ) {\r\n            myCart.splice(index, 1);\r\n          }\r\n        });\r\n        myCart.push(exist[0]);\r\n        console.log(myCart);\r\n        localStorage.setItem('myCart', JSON.stringify(myCart));\r\n      } else {\r\n        console.log('wala');\r\n        myCart.push(myOrder);\r\n        console.log(myCart);\r\n        localStorage.setItem('myCart', JSON.stringify(myCart));\r\n      }\r\n    } else {\r\n      myCart = [];\r\n      myCart.push(myOrder);\r\n      localStorage.setItem('myCart', JSON.stringify(myCart));\r\n    }\r\n    this.props.addToCart(JSON.parse(localStorage.getItem('myCart')));\r\n  };\r\n\r\n  //\r\n  render() {\r\n    return (\r\n      <div className=\"main-container preview\">\r\n        {this.state.buyNow && <Redirect to=\"/mycheckout\" />}\r\n        <div className=\"mini-container mini-preview\">\r\n          <div className=\"div-for-main-content\">\r\n            <div className=\"div-for-xbtn\">\r\n              <button id=\"xbtn\" onClick={() => this.props.addToPreview(null)}>\r\n                X\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"div-for-img-preview\">\r\n              <div className=\"div-for-arrow\">\r\n                <i\r\n                  className=\"fas fa-chevron-left arrowLeft\"\r\n                  onClick={this.arrowLeft}\r\n                ></i>\r\n              </div>\r\n              <div className=\"div-for-display-img\">\r\n                <img\r\n                  id=\"img-preview\"\r\n                  src={this.props.item.image[this.state.imageIndex]}\r\n                  alt=\"For image\"\r\n                />\r\n              </div>\r\n              <div className=\"div-for-arrow\">\r\n                <i\r\n                  className=\"fas fa-chevron-right arrowRight\"\r\n                  onClick={this.arrowRight}\r\n                ></i>\r\n              </div>\r\n            </div>\r\n            <div className=\"div-for-mini-content\">\r\n              <div className=\"div-for-details\">\r\n                <div className=\"content\" id=\"item-name\">\r\n                  {this.props.item.name}\r\n                </div>\r\n                <div className=\"content\" id=\"item-price\">\r\n                  Php {this.props.item.price}\r\n                </div>\r\n                <div className=\"div-for-btns content\">\r\n                  <button\r\n                    className=\"btns\"\r\n                    id=\"buynow-btn\"\r\n                    onClick={this.buyNowBtn}\r\n                  >\r\n                    BUY NOW\r\n                  </button>\r\n                  <button\r\n                    className=\"btns\"\r\n                    id=\"addtocart-btn\"\r\n                    onClick={this.addToCartBtn}\r\n                  >\r\n                    ADD TO CART\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"div-for-description\" id=\"item-description\">\r\n                <p>\r\n                  a prevailing custom or style of dress, etiquette, socializing,\r\n                  etc.; mode: the latest fashion in boots. 2. conventional usage\r\n                  in dress, manners, etc., esp. of polite society, or conformity\r\n                  to it: to be out of fashion. 3. manner; way; mode: in a\r\n                  warlike fashion.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (store) => {\r\n  return {\r\n    user: store.user,\r\n    preview: store.preview,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToPreview: (req) => dispatch({ type: 'ADD_TO_PREVIEW', payload: req }), //to null (closed this page)\r\n    addToCart: (myOrder) => dispatch({ type: 'ADD_TO_CART', payload: myOrder }),\r\n\r\n    placeOrder: (myOrder) =>\r\n      dispatch({ type: 'PLACE_ORDER', payload: myOrder }),\r\n  };\r\n};\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(PreviewItem);\r\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"117","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":15},{"ruleId":"113","severity":1,"message":"118","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":25},{"ruleId":"113","severity":1,"message":"119","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":20},{"ruleId":"113","severity":1,"message":"120","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":18},{"ruleId":"113","severity":1,"message":"121","line":1,"column":8,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},{"ruleId":"113","severity":1,"message":"122","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"123","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":16},{"ruleId":"125","severity":1,"message":"126","line":236,"column":15,"nodeType":"127","endLine":236,"endColumn":67},{"ruleId":"113","severity":1,"message":"121","line":1,"column":8,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},{"ruleId":"113","severity":1,"message":"122","line":7,"column":8,"nodeType":"115","messageId":"116","endLine":7,"endColumn":19},{"ruleId":"113","severity":1,"message":"128","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":21},{"ruleId":"113","severity":1,"message":"129","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":18},{"ruleId":"113","severity":1,"message":"130","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":18},{"ruleId":"113","severity":1,"message":"131","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":14},{"ruleId":"113","severity":1,"message":"132","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":15},{"ruleId":"133","severity":1,"message":"134","line":125,"column":17,"nodeType":"127","endLine":129,"endColumn":19},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'AddCategory' is defined but never used.","Identifier","unusedVar","'additem' is defined but never used.","'registrationstyle' is defined but never used.","'displayitems' is defined but never used.","'loginStyle' is defined but never used.","'axios' is defined but never used.","'mycartstyle' is defined but never used.","'addcategory' is defined but never used.","'edititem' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'transaactions' is defined but never used.","'adminstyle' is defined but never used.","'mecheckout' is defined but never used.","'Link' is defined but never used.","'preview' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]